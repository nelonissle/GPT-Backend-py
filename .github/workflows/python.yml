name: Python Microservices CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-admin:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-admin-${{ hashFiles('gpt_backend/admin_service/requirements.txt') }}

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Lint with flake8
        working-directory: ./gpt_backend/admin_service
        run: |
          pip install flake8
          flake8 --max-line-length 120 --ignore E302,E305,E402,E501,F401,W292,W293,E221,E241 .

      - name: Security scan with safety
        working-directory: ./gpt_backend/admin_service
        run: |
          pip install safety
          safety check -r requirements.txt

      - name: Install dependencies and build admin_service
        working-directory: ./gpt_backend/admin_service
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

  test-admin:
    needs: build-admin
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-admin-test-${{ hashFiles('gpt_backend/admin_service/requirements.txt') }}

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies and test admin_service
        working-directory: ./gpt_backend/admin_service
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pytest || true

      - name: Notify Slack on failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,ref,workflow,job,author
          mention: here
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  build-auth:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-auth-${{ hashFiles('gpt_backend/auth_service/requirements.txt') }}

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Lint with flake8
        working-directory: ./gpt_backend/auth_service
        run: |
          pip install flake8
          flake8 --max-line-length 120 --ignore E302,E305,E402,E501,F401,W292,W293,E221,E241 .

      - name: Security scan with safety
        working-directory: ./gpt_backend/auth_service
        run: |
          pip install safety
          safety check -r requirements.txt

      - name: Install dependencies and build auth_service
        working-directory: ./gpt_backend/auth_service
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

  test-auth:
    needs: build-auth
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-auth-test-${{ hashFiles('gpt_backend/auth_service/requirements.txt') }}

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies and test auth_service
        working-directory: ./gpt_backend/auth_service
        env:
          SECRET_KEY: testsecret
          ALGORITHM: HS256
          DATABASE_URL: "sqlite:///:memory:"
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pytest

      - name: Notify Slack on failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,ref,workflow,job,author
          mention: here
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  build-chat:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-chat-${{ hashFiles('gpt_backend/chat_service/requirements.txt') }}

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Lint with flake8
        working-directory: ./gpt_backend/chat_service
        run: |
          pip install flake8
          flake8 --max-line-length 120 --ignore E302,E305,E402,E501,F401,W292,W293,E221,E241 .

      - name: Security scan with safety
        working-directory: ./gpt_backend/chat_service
        run: |
          pip install safety
          safety check -r requirements.txt

      - name: Install dependencies and build chat_service
        working-directory: ./gpt_backend/chat_service
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

  test-chat:
    needs: build-chat
    runs-on: ubuntu-latest
    services:
      mongo:
        image: mongo:6
        env:
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: example
        ports:
          - 27017:27017

    steps:
      - uses: actions/checkout@v4

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-chat-test-${{ hashFiles('gpt_backend/chat_service/requirements.txt') }}

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies and test chat_service
        working-directory: ./gpt_backend/chat_service
        env:
          MONGO_SERVICE_HOST: localhost
          MONGO_SERVICE_PORT: "27017"
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: example
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pytest

      - name: Notify Slack on failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,ref,workflow,job,author
          mention: here
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  
  lint-helm:
    needs: [test-admin, test-auth, test-chat]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Helm
        uses: azure/setup-helm@v4
      - name: Lint all Helm charts
        run: |
          helm lint kub-gpt/charts/admin-service
          helm lint kub-gpt/charts/auth-service
          helm lint kub-gpt/charts/chat-service
          helm lint kub-gpt/charts/kong
          helm lint kub-gpt/charts/mongo
          helm lint kub-llm/charts/ollama

  deploy-staging:
    needs: lint-helm
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      # staging deploy stepsâ€¦

  deploy:
    needs: deploy-staging
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write

    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver: docker-container

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push admin_service
        uses: docker/build-push-action@v6
        with:
          context: ./gpt_backend/admin_service
          file: ./gpt_backend/admin_service/Dockerfile
          push: true
          tags: nelonissle7/gpt_admin:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push auth_service
        uses: docker/build-push-action@v6
        with:
          context: ./gpt_backend/auth_service
          file: ./gpt_backend/auth_service/Dockerfile
          push: true
          tags: nelonissle7/gpt_auth:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push chat_service
        uses: docker/build-push-action@v6
        with:
          context: ./gpt_backend/chat_service
          file: ./gpt_backend/chat_service/Dockerfile
          push: true
          tags: nelonissle7/gpt_chat:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max


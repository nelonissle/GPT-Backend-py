apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "grafana.fullname" . }}
  namespace: {{ .Values.namespace }}
  labels:
    {{- include "grafana.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "grafana.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "grafana.selectorLabels" . | nindent 8 }}
    spec:
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.service.targetPort }}
              protocol: TCP
          env:
            {{- if .Values.admin.existingSecret }}
            - name: GF_SECURITY_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.admin.existingSecret }}
                  key: admin-user
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.admin.existingSecret }}
                  key: admin-password
            {{- else }}
            - name: GF_SECURITY_ADMIN_USER
              value: {{ .Values.admin.user }}
            - name: GF_SECURITY_ADMIN_PASSWORD
              value: {{ .Values.admin.password }}
            {{- end }}
            - name: GF_INSTALL_PLUGINS
              value: {{ .Values.config.plugins }}
            - name: GF_AUTH_ANONYMOUS_ENABLED
              value: "true"
            - name: GF_AUTH_ANONYMOUS_ORG_ROLE
              value: "Viewer"
            - name: GF_SECURITY_ALLOW_EMBEDDING
              value: {{ .Values.config.allowEmbedding | quote }}
            - name: GF_USERS_AUTO_ASSIGN_ORG
              value: {{ .Values.config.autoAssignOrg | quote }}
          volumeMounts:
            - name: storage
              mountPath: /var/lib/grafana
            - name: datasources
              mountPath: /etc/grafana/provisioning/datasources
            {{- if .Values.config.dashboardProvider.enabled }}
            - name: dashboards-provider
              mountPath: /etc/grafana/provisioning/dashboards
            - name: dashboards
              mountPath: /var/lib/grafana/dashboards
            {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          readinessProbe:
            httpGet:
              path: /api/health
              port: http
            initialDelaySeconds: 30
            timeoutSeconds: 30
          livenessProbe:
            httpGet:
              path: /api/health
              port: http
            initialDelaySeconds: 60
      volumes:
        - name: storage
          {{- if .Values.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ include "grafana.fullname" . }}-data
          {{- else }}
          emptyDir: {}
          {{- end }}
        - name: datasources
          configMap:
            name: {{ include "grafana.fullname" . }}-datasources
        {{- if .Values.config.dashboardProvider.enabled }}
        - name: dashboards-provider
          configMap:
            name: {{ include "grafana.fullname" . }}-dashboards-provider
        - name: dashboards
          configMap:
            name: {{ include "grafana.fullname" . }}-dashboards
        {{- end }}
